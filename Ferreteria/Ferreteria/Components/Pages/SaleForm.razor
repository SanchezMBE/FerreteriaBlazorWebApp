@page "/ventas/nueva"
@rendermode InteractiveServer
@inject IRepositoryProducts _repositoryProducts;
@inject IRepositorySaleDetails _repositorySaleDetails;
@inject IRepositorySales _repositorySales;
@inject NavigationManager _navigator;
<PageTitle>Nueva venta</PageTitle>
<h2>Nueva venta</h2>

<EditForm Model="_saleDetail" FormName="frmSaleDetail" OnValidSubmit="AddProduct">
    @if (_showError)
    {
        <div class="alert alert-danger alert-dismissible" role="alert">
            @_errorMessage
            <button type="button" class="btn-close" aria-label="Close" @onclick="() => _showError = false"></button>
        </div>
    }
    <DataAnnotationsValidator />
    <div class="row mb-3">
        <label for="numProductId" class="col-2 col-form-label">Producto</label>
        <div class="col-10">
            <InputSelect class="form-control" id="numProductId" @bind-Value="_saleDetail.ProductId">
                <option value="0" disabled="disabled">Seleccione un producto...</option>
                @foreach (var product in _products)
                {
                    <option value="@product.Id">@product.Code @product.Description</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _saleDetail.ProductId)" />
        </div>
    </div>
    <div class="row mb-3">
        <label for="numQuantity" class="col-2 col-form-label">Cantidad</label>
        <div class="col-10">
            <InputNumber class="form-control" id="numQuantity" @bind-Value="_saleDetail.Quantity"></InputNumber>
            <ValidationMessage For="@(() => _saleDetail.Quantity)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary mb-3">Agregar producto</button>
</EditForm>

@if (_saleDetails.Count != 0)
{
    <h5 class="text-muted">Listado de productos</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Código</th>
                <th>Descripción</th>
                <th>Cantidad</th>
                <th>Precio unitario</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (SaleDetail saleDetail in _saleDetails)
            {
                <tr>
                    <td>@saleDetail.Product?.Code</td>
                    <td>@saleDetail.Product?.Description</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" title="Decrementar cantidad" @onclick="() => DecreaseProductQuantity(saleDetail)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-lg" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8" />
                            </svg>
                        </button>
                        @saleDetail.Quantity
                        <button class="btn btn-primary btn-sm ms-2" title="Incrementar cantidad" @onclick="() => IncreaseProductQuantity(saleDetail)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                            </svg>
                        </button>
                    </td>
                    <td>$@saleDetail.UnitPrice</td>
                    <td>$@(saleDetail.Quantity * saleDetail.UnitPrice)</td>
                    <td>
                        <button class="btn btn-danger btn-sm" title="Eliminar producto" @onclick="() => DeleteProduct(saleDetail)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                            </svg>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
} else
{
    <h5 class="text-muted">No hay productos en la venta</h5>
}

<EditForm Model="_sale" FormName="frmSale" OnValidSubmit="Confirm">
    <DataAnnotationsValidator/>
    <div class="input-group input-group-lg mb-3">
        <span class="input-group-text" id="inputGroup-sizing-lg">Total</span>
        <div type="text" class="form-control">$@_sale.TotalAmount</div>
    </div>
    <button type="submit" class="btn btn-success btn-lg">Confirmar</button>
    <button type="button" class="btn btn-danger btn-lg ms-2" @onclick="Cancel" @onclick:preventDefault>Cancelar</button>
    <ValidationMessage For="@(() => _sale.TotalAmount)" />
</EditForm>

@code {
    private SaleDetail _saleDetail = new();
    private List<Product> _products = new();
    private List<SaleDetail> _saleDetails = new();
    private Sale _sale = new();
    private bool _showError = false;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        _products = await _repositoryProducts.GetAll();
    }

    private async void AddProduct()
    {
        Product product = await _repositoryProducts.Get(_saleDetail.ProductId);
        if (product == null)
        {
            _errorMessage = "El producto ingresado no existe";
            _showError = true;
            return;
        }

        SaleDetail previousSaleDetail = _saleDetails.Find(sd => sd.ProductId == product.Id)!;
        if (previousSaleDetail != null)
        {
            _errorMessage = "El producto ya ha sido agregado";
            _showError = true;
            return;
        }

        int diff = product.StockQuantity - _saleDetail.Quantity;
        if (diff < 0)
        {
            _errorMessage = "No hay suficiente cantidad en stock";
            _showError = true;
            return;
        }

        _showError = false;
        SaleDetail saleDetail = new()
            {
                ProductId = product.Id,
                Product = product,
                Quantity = _saleDetail.Quantity,
                UnitPrice = product.SalePrice
            };
        _saleDetails.Add(saleDetail);
        UpdateTotalAmount();
    }

    private void DeleteProduct(SaleDetail saleDetail)
    {
        _saleDetails.Remove(saleDetail);
        UpdateTotalAmount();
    }

    private async void IncreaseProductQuantity(SaleDetail saleDetail)
    {
        Product product = await _repositoryProducts.Get(saleDetail.ProductId);
        int diff = product.StockQuantity - saleDetail.Quantity;
        if (diff <= 0)
        {
            _errorMessage = "No hay suficiente cantidad en stock";
            _showError = true;
            return;
        }

        saleDetail.Quantity++;
        UpdateTotalAmount();
    }

    private void DecreaseProductQuantity(SaleDetail saleDetail)
    {
        saleDetail.Quantity--;
        if (saleDetail.Quantity == 0)
        {
            DeleteProduct(saleDetail);
        }
        UpdateTotalAmount();
    }

    private void UpdateTotalAmount()
    {
        _sale.TotalAmount = 0;
        foreach (SaleDetail saleDetail in _saleDetails)
        {
            _sale.TotalAmount += saleDetail.UnitPrice * saleDetail.Quantity;
        }
    }

    private async void Confirm()
    {
        _sale.SaleDate = DateTime.Now;
        _sale = await _repositorySales.Add(_sale);
        foreach (SaleDetail saleDetail in _saleDetails)
        {
            saleDetail.SaleId = _sale.Id;
            Product product = await _repositoryProducts.Get(saleDetail.ProductId);
            product.StockQuantity -= saleDetail.Quantity;
            await _repositoryProducts.Update(product.Id, product);
            await _repositorySaleDetails.Add(saleDetail);
        }
        await _repositorySales.Update(_sale.Id, _sale!);
        Cancel();
    }

    private void Cancel()
    {
        _navigator.NavigateTo("/ventas");
    }
}
